# Ray Tracing Part 1

## Why?
- Rasterization couldn't handle global effects well 
    - (Soft) shadows
    - light bounces more than once

- Rasterization is fast, bug quality is relatively low

- Ray tracing is accurate, but is very slow  


## Light Rays

### Three ideas about light rays
- straight lights
- not collide with each other
- reciprocity（also reversibility)


## Ray Casting
- Generate an image by casting one ray per pixel  
- Check for shadows by sending a ray to the light  

## Recursive(Whitted-Style) Ray Tracing
multi-bouncing light  

## Ray Equation
r(t) = o + td, 0<=t<=∞, where
r is ray, o is origin, d is direction, t is "time(distance)"

## Ray intersection with surface

### with implicit surface 
solve intersection equation

### with Triangle Mesh 
- calculate per triangle
simple, slow(ignore multiple intersection)

- a point is in a triangle


## Accelerating Ray-Surface Intersection

### Ray Tracing - performance chanllenges
- exhaustively ray test!
- time complexity = #pixels * #objects (* #bounces)

## Bounding Volumes  

Important: box is the intersection of 3 pairs of slabs



# Ray Tracing Part 2


## Uniform Spatial Partitions(Grids)  

- Preprocess - Build Acceleration Grid
1. Find bounding box
2. Create grid
3. Store each object in overlapping cells  

- Ray-Scene Intersection
1. Step through grid in ray traversal order
2. For each grid cell
    Test intersection with all objects stored at that cell  

- Uniform Grids - When They Work Well
on large collections of objects that are distributed evenly in size and space  

- Uniform Grids - When They Fail  
"Teapot in a stadium" problem


## Spatial Partitions

- Examples 
Oct-Tree, KD-Tree, BSP-Tree  

corn: 
- hard to find whether there exist intersection with triangels and bounding boxes.
- objects may be stored in more than one leaf node!

### Data Structure for KD-Tree
- Internal nodes store
    - split axis: x, y, z...
    - split position : coordinate of split plane along axis
    - children : pointers to child nodes
    - No objects are store in internal nodes

- Leaf nodes store
    - list of objects  


### Objects Partitions & Bounding Volume Hierarchy(BVH)  

- Summary : Building BVHs
1. Find bounding box
2. Recursively split set of objects in two subsets
3. Recompute the bounding box of the subsets
4. Stop when neccessary
5. Store objects in each leaf node

- How to subdivide a node?
1. choose a dimension to split
2. Heuristic #1: Always choose the longest axis in node
3. Heuristic #2: Split node at location of **median** object  
(using quick slection algorithm to find median number)  

- Termination criteria?  
1. Heuristic:stop when node contains few elements

### Data Structure for BVHs
- Internal nodes store
1. bounding box  
2. Childern : pointers to child nodes  

- Leaf nodes store  
1. Bounding box  
2. List of objects  

- Nodes represent subset of primitives in scene  
1. All objects in subtree  

### Spatial vs Object Partitions  
- Spatial partition(e.g. KD-tree)  
1. Partition space into non-overlapping regions  
2. An objects can be contained in multiple regions  

- Object partition (e.g. BVH)  
1. Partition set of objects into disjoint subsets  
2. bounding boxes for each set may overlap in space  


## Radiometry - Motivation  
Perform lighting calculations in a physically correct manner   

### Radiometry  
- Measurement system and units for illumination  
- Accurately measure the spatial properties of light  
- New terms: radiant flux, intensity, irradiance, radiance  


### Radiant Energy and Flux(Power)  
- Definition: Radiant energy, Q[J = Joule]  
- Definition: Raidant flux(power， phi = dQ/dt[W=Watt][lm=lumen]*  
- Flux - # photons flowing through a sensor in unit time  

### Important Light Measurements of Interest  
- Raidant Intensity: Light Emitted From A Source  
- Irradiance: Light Falling On A Surface  
- Radiance: Light Traveling Along A Ray  


### Radiance Intensity  
- Definition: power per unity **solid angle**  
- I(omega)=d phi / d omega[w/sr][lm/sr=cd=candela](sr:solid angle)  
- Solid angle:ratio of subtended area on sphere to radius squared,  
    omega = A/(r*r)  
 - Differential Solid Angles （ polar coordinates)
    dA = (r * d theta)*(r * sin theta * d phi) = r*r*sin theta*d theta * d phi  
    d omega = dA / (r*r) = sin(theta)*d theta*d phi  

- use omega to denote a direction vector(unit length) by theta and phi  


### Isotropic Point Source   
phi = ∫ I d omega  = 4πI 
I = phi / (4π)  


# Ray Tracing part 3  
- Irradiance:power per unit area  
E(x) = phi / A [W/(m * m)][lm/(m*m)=lux]  

- Radiance : power per unit solid angle, per projected unit area
    - the quantity associated with a ray  
    - Rendering is all about computing radiance  

- Irradiacne vs Radiance
    - Irradiance:total power received by area A
    - Radiance : power received by area A from "dirrection" omega  


## Bidirectional Reflectance Distribution Function(BRDF)

### Reflection at a Pioint   
Raidance from dirction omega turns into the power E that A receives, then  
power E will become the radiance to any other direction omega  


### BRDF  
represents how much light is reflected into each outgoing direction omega from each incoming direction  

### The Reflection Equation  
sum of radiance orignated from every possible direction

### Challenge: recursive Equation 
also light multiply bouncing  

### The Rendering Equation  
radiance emmitted by self and radiance received from others  

Relected light(Output Image)=Emission + (Reflected light * BRDF * Cosine of Incident angle) 

L = E + K*L

L = E + KE + K*K*E + K*K*K*E + ...


# Ray Tracing Part 3 Again
## Review Concepts  
- Raidant energy Q:the energy of electromagnetic radiation  
- Radiant flux(power) phi:energy per unit time  
- Radiant itensity:power per unit solid angle
- Solid Angle:ratio of subtended area on sphere to radius squared  

### Differential Solid Angles
** in sphere coordinate**


## Irradiance  
Definition:the irradiance is the power per unit area incident on a surface point  
** required light rays perpendicular/projected to suface**


## Radiance  
Raidance is the fundamental field quantity that describes the distribution of light in an enviroment:
- Raidance is the quantity associated with a ray
- Rendering is all about computing radiance  

Definition:power emitted, reflected, transmitted or received by a surface, per unit solid angle, per projected unit area 

Recall:
- Irradiance:power per projected unit area  
- Intensity:power per solid angle  
So:
- Radiance:Irradiance per solid angle
- Radiance:Intensity per projected unit area  


### Iradiance vs. Radiance  
- Irradiance:total power received by area dA
- Radiance:power received by area dA from "direction" dw  

## Bidirectional Reflectance Distribution Function(BRDF)

### Reflection at a Point  
Radiance from direction w1 turns into the power E thar dA receives,
the power E will become the radiance to any other direction w0. 

### BRDF 
The BRDF represents how much light is reflected into each outgoing direction from each incoming direction  

### The Reflection Equation  
incoming radiance: light in scene  
dA:per pixel or point in mesh   
outgoing radiance:color should be seen by camera, calculated by sum of contribution of all incomiing radiance

### Challenge:Recursive Equation  
- Reflected radiance depends on incoming radiance  
- But incoming radiance depends on reflected radiance at another point  
- also call it light bouncing  

### The Rendering Equation  
Re-write the reflection equation by adding an Emission term to make it general!


# Ray Tracing part 4  

## Monte Carlo Integration  
Why:it can be difficult to solve a definite integral (eg.the function is represented by a complex expression or curve)

Sample on the interval [a,b] randomly, and calculate the sum of all area of splited rectangle

Some notes:
- The more samples, the less variance.  
- Sample on x, integrate on x.

## Path Tracing  
Whitted-style ray tracing:
- always perform specular reflections/refractions  
- Stop bouncing at diffuse surfaces  

### Problem of Whitted-style Ray Tracing  
1. Where should the ray be reflected for glossy materials  (Utah teapot)
2. No reflections between diffuse materials  (Cornell box, Cornell bleed)  

### Whitted-Style Ray Tracing is Wrong  
But Rendering Equation is Correct!  
But it involves:
- Solving an integral over the hemisphere, and 
- Recursive execution  

### A Simple Monte Carlo Solution 
- Abuse the concept of Reflection Equation a littele bit.
- Fancy as it is, it's still just an integration over directions
- ignore light emitted by point self 

So:
(PDF:Probability Distribution Function)
shade(p, wo)
    Randomly choose N directions wi~pdf 
    Lo = 0.0 
    for each wi 
        Trace a ray r(p, wi)
        If ray r hit the light 
            Lo += (1 / N) * L_i * f_r * cosine / pdf(wi)
    Reture Lo  

### Introducing Global Illumination  
shade(p, wo)
    Randomly choose N directions wi~pdf 
    Lo = 0.0 
    for each wi 
        Trace a ray r(p, wi)
        If ray r hit the light 
            Lo += (1 / N) * L_i * f_r * cosine / pdf(wi)
        Else If ray r hit an object at q  
            Lo += (1 / N) * shade(q, -wi) * f_r * cosine / pdf(wi)  
    Reture Lo  


### Path Tracing
- problem 1  
    Explosion of #rays as #bounces go up: #rays = pow(N, #bouncs) 

So let N equal with 1.
It assume that only 1 ray is traced at each shading point:

shade(p, wo)  
    Randomly choose ONE direction wi~pdf(wi)  
    Trace a ray r(p, wi)  
    If ray r hit the light  
        Return L_i * f_r * cosine / pdf(wi)  
    Else If ray r hit an object at q  
        Return shade(q, -wi) * f_r * cosine / pdf(wi) 


it calls path tracing!(FYI, Distributed Ray Tracing if N != 1)  - FYI:for your infomation

### Ray Generation  
more path tracing and average them!!  

ray_generation(camPos, pixel)  
    Uniformly choose N sample positions within the pixel  
    pixel_radiance = 0.0  
    For each sample in the pixel  
        Shoot a ray r(camPos, cam_to_sample)  
        If ray r hit the scene at p  
            pixel_radiance += 1 / N * shade(p, sample_to_cam)  
    Return pixel_raidance  

but problem 2:
when to stop the recursive function -- shade(p, wo)?  

### Solution:Russian Roulette(RR)  
1. we get result Lo from shade(p, wo) 
2. Set a probability P(0 < P < 1)  
    with Probability P, shoot a ray and return shading result divided by P : Lo / P  
    with Probability 1 - P, don't shoot a ray and get 0  
3. E = P * (Lo / P) + (1 - P) * 0 = Lo 

shade(p, wo)  
    Specify a probability P_RR  
    Randomly select ksi in a uniform distribution in [0, 1]  
    If ksi > P_RR  
        return 0.0  

    Randomly choose ONE direction wi~pdf(wi)  
    Trace a ray r(p, wi)  
    If ray r hit the light  
        Return L_i * f_r * cosine / pdf(wi) / P_RR  
    Else If ray r hit an object at q  
        Return shade(q, -wi) * f_r * cosine / pdf(wi) / P_RR  

SPP : samples per pixel, also how much path is to trace  


### Sampling the Light  
Monte Carlo methods allows **any** sampling methods, 
so we can sample the light(therefore no rays are "wasted")  

we consider the radiance coming from two parts: 
1. light source (direct, no need to have RR) 
2. other reflectors (indirect, RR)

last little problem:
we should consider occluder between light and pixel when we do light sampling 














